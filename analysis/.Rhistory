ggplot2::geom_point(shape = 22, size = 3) +
ggplot2::geom_errorbarh(height = 0, size = 0.75) +
ggplot2::geom_errorbar(width = 0, size = 0.75) +
ggplot2::xlab("Mean runtime per iteration (in seconds)") +
ggplot2::ylab("Mean improv. over the best initial solution (%)") +
ggplot2::scale_color_discrete(name = "Strategy: ") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "bottom",
axis.title = element_text(size = 16),
axis.text = element_text(size = 12, margin = margin(t = 6, b = 6))) +
facet_zoom(xlim = c(5, 11), ylim = c(0.965, 0.99),
zoom.size = 1, show.area = TRUE, shrink = TRUE, split = FALSE)
# Save figure as PDF
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.pdf"),
plot = fig, width = 20, height = 10)
# Save figure as PNG
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.png"),
plot = fig, width = 20, height = 10)
# Save figure as PDF
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.pdf"),
plot = fig, width = 10, height = 5)
# Save figure as PNG
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.png"),
plot = fig, width = 10, height = 5)
# Create figure
fig <- ggplot2::ggplot(fig.data,
aes(x = MEAN.DELTA.TIME.S,
xmin = MEAN.DELTA.TIME.S - SE.DELTA.TIME.S,
xmax = MEAN.DELTA.TIME.S + SE.DELTA.TIME.S,
y = MEAN.IMPROV.OBJ,
ymin = MEAN.IMPROV.OBJ - SE.IMPROV.OBJ,
ymax = MEAN.IMPROV.OBJ + SE.IMPROV.OBJ,
color = RULE)) +
ggplot2::geom_point(shape = 22, size = 3) +
ggplot2::geom_errorbarh(height = 0, size = 0.75) +
ggplot2::geom_errorbar(width = 0, size = 0.75) +
ggplot2::xlab("Mean runtime per iteration (in seconds)") +
ggplot2::ylab("Mean improv. over the best initial solution (%)") +
ggplot2::scale_color_discrete(name = "Strategy: ") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "bottom",
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12, margin = margin(t = 6, b = 6))) +
facet_zoom(xlim = c(5, 11), ylim = c(0.965, 0.99),
zoom.size = 1, show.area = TRUE, shrink = TRUE, split = FALSE)
# Save figure as PDF
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.pdf"),
plot = fig, width = 10, height = 5)
# Save figure as PNG
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.png"),
plot = fig, width = 10, height = 5)
# Create figure
fig <- ggplot2::ggplot(fig.data,
aes(x = MEAN.DELTA.TIME.S,
xmin = MEAN.DELTA.TIME.S - SE.DELTA.TIME.S,
xmax = MEAN.DELTA.TIME.S + SE.DELTA.TIME.S,
y = MEAN.IMPROV.OBJ,
ymin = MEAN.IMPROV.OBJ - SE.IMPROV.OBJ,
ymax = MEAN.IMPROV.OBJ + SE.IMPROV.OBJ,
color = RULE)) +
ggplot2::geom_point(shape = 22, size = 3) +
ggplot2::geom_errorbarh(height = 0, size = 0.75) +
ggplot2::geom_errorbar(width = 0, size = 0.75) +
ggplot2::xlab("Mean runtime per iteration (in seconds)") +
ggplot2::ylab("Mean improv. over the best initial solution (%)") +
ggplot2::scale_color_discrete(name = "Strategy: ") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "bottom",
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 6)),
axis.title.b = element_text(margin = margin(l = 6)),
axis.text = element_text(size = 12, margin = margin(t = 6, b = 6))) +
facet_zoom2(xlim = c(5, 11), ylim = c(0.965, 0.99),
zoom.size = 1, show.area = TRUE, shrink = TRUE, split = FALSE)
# Save figure as PDF
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.pdf"),
plot = fig, width = 10, height = 5)
# Save figure as PNG
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.png"),
plot = fig, width = 10, height = 5)
# Create figure
fig <- ggplot2::ggplot(fig.data,
aes(x = MEAN.DELTA.TIME.S,
xmin = MEAN.DELTA.TIME.S - SE.DELTA.TIME.S,
xmax = MEAN.DELTA.TIME.S + SE.DELTA.TIME.S,
y = MEAN.IMPROV.OBJ,
ymin = MEAN.IMPROV.OBJ - SE.IMPROV.OBJ,
ymax = MEAN.IMPROV.OBJ + SE.IMPROV.OBJ,
color = RULE)) +
ggplot2::geom_point(shape = 22, size = 3) +
ggplot2::geom_errorbarh(height = 0, size = 0.75) +
ggplot2::geom_errorbar(width = 0, size = 0.75) +
ggplot2::xlab("Mean runtime per iteration (in seconds)") +
ggplot2::ylab("Mean improv. over the best initial solution (%)") +
ggplot2::scale_color_discrete(name = "Strategy: ") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "bottom",
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 6)),
axis.title.y = element_text(margin = margin(l = 6)),
axis.text = element_text(size = 12, margin = margin(t = 6, b = 6))) +
facet_zoom2(xlim = c(5, 11), ylim = c(0.965, 0.99),
zoom.size = 1, show.area = TRUE, shrink = TRUE, split = FALSE)
# Save figure as PDF
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.pdf"),
plot = fig, width = 10, height = 5)
# Save figure as PNG
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.png"),
plot = fig, width = 10, height = 5)
# Create figure
fig <- ggplot2::ggplot(fig.data,
aes(x = MEAN.DELTA.TIME.S,
xmin = MEAN.DELTA.TIME.S - SE.DELTA.TIME.S,
xmax = MEAN.DELTA.TIME.S + SE.DELTA.TIME.S,
y = MEAN.IMPROV.OBJ,
ymin = MEAN.IMPROV.OBJ - SE.IMPROV.OBJ,
ymax = MEAN.IMPROV.OBJ + SE.IMPROV.OBJ,
color = RULE)) +
ggplot2::geom_point(shape = 22, size = 3) +
ggplot2::geom_errorbarh(height = 0, size = 0.75) +
ggplot2::geom_errorbar(width = 0, size = 0.75) +
ggplot2::xlab("Mean runtime per iteration (in seconds)") +
ggplot2::ylab("Mean improv. over the best initial solution (%)") +
ggplot2::scale_color_discrete(name = "Strategy: ") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "bottom",
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 6)),
axis.title.y = element_text(margin = margin(b = 6)),
axis.text = element_text(size = 12, margin = margin(t = 6, b = 6))) +
facet_zoom2(xlim = c(5, 11), ylim = c(0.965, 0.99),
zoom.size = 1, show.area = TRUE, shrink = TRUE, split = FALSE)
# Save figure as PDF
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.pdf"),
plot = fig, width = 10, height = 5)
# Save figure as PNG
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.png"),
plot = fig, width = 10, height = 5)
# Create figure
fig <- ggplot2::ggplot(fig.data,
aes(x = MEAN.DELTA.TIME.S,
xmin = MEAN.DELTA.TIME.S - SE.DELTA.TIME.S,
xmax = MEAN.DELTA.TIME.S + SE.DELTA.TIME.S,
y = MEAN.IMPROV.OBJ,
ymin = MEAN.IMPROV.OBJ - SE.IMPROV.OBJ,
ymax = MEAN.IMPROV.OBJ + SE.IMPROV.OBJ,
color = RULE)) +
ggplot2::geom_point(shape = 22, size = 3) +
ggplot2::geom_errorbarh(height = 0, size = 0.75) +
ggplot2::geom_errorbar(width = 0, size = 0.75) +
ggplot2::xlab("Mean runtime per iteration (in seconds)") +
ggplot2::ylab("Mean improv. over the best initial solution (%)") +
ggplot2::scale_color_discrete(name = "Strategy: ") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "bottom",
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 6)),
axis.title.y = element_text(margin = margin(b = 24)),
axis.text = element_text(size = 12, margin = margin(t = 6, b = 6))) +
facet_zoom2(xlim = c(5, 11), ylim = c(0.965, 0.99),
zoom.size = 1, show.area = TRUE, shrink = TRUE, split = FALSE)
# Save figure as PDF
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.pdf"),
plot = fig, width = 10, height = 5)
# Save figure as PNG
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.png"),
plot = fig, width = 10, height = 5)
# Create figure
fig <- ggplot2::ggplot(fig.data,
aes(x = MEAN.DELTA.TIME.S,
xmin = MEAN.DELTA.TIME.S - SE.DELTA.TIME.S,
xmax = MEAN.DELTA.TIME.S + SE.DELTA.TIME.S,
y = MEAN.IMPROV.OBJ,
ymin = MEAN.IMPROV.OBJ - SE.IMPROV.OBJ,
ymax = MEAN.IMPROV.OBJ + SE.IMPROV.OBJ,
color = RULE)) +
ggplot2::geom_point(shape = 22, size = 3) +
ggplot2::geom_errorbarh(height = 0, size = 0.75) +
ggplot2::geom_errorbar(width = 0, size = 0.75) +
ggplot2::xlab("Mean runtime per iteration (in seconds)") +
ggplot2::ylab("Mean improv. over the best initial solution (%)") +
ggplot2::scale_color_discrete(name = "Strategy: ") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "bottom",
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title = element_text(size = 14, margin = margin(t = 6, b = 6)),
axis.text = element_text(size = 12, margin = margin(t = 6, b = 6))) +
facet_zoom2(xlim = c(5, 11), ylim = c(0.965, 0.99),
zoom.size = 1, show.area = TRUE, shrink = TRUE, split = FALSE)
# Save figure as PDF
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.pdf"),
plot = fig, width = 10, height = 5)
# Save figure as PNG
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.png"),
plot = fig, width = 10, height = 5)
# Create figure
fig <- ggplot2::ggplot(fig.data,
aes(x = MEAN.DELTA.TIME.S,
xmin = MEAN.DELTA.TIME.S - SE.DELTA.TIME.S,
xmax = MEAN.DELTA.TIME.S + SE.DELTA.TIME.S,
y = MEAN.IMPROV.OBJ,
ymin = MEAN.IMPROV.OBJ - SE.IMPROV.OBJ,
ymax = MEAN.IMPROV.OBJ + SE.IMPROV.OBJ,
color = RULE)) +
ggplot2::geom_point(shape = 22, size = 3) +
ggplot2::geom_errorbarh(height = 0, size = 0.75) +
ggplot2::geom_errorbar(width = 0, size = 0.75) +
ggplot2::xlab("Mean runtime per iteration (in seconds)") +
ggplot2::ylab("Mean improv. over the best initial solution (%)") +
ggplot2::scale_color_discrete(name = "Strategy: ") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "bottom",
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title = element_text(size = 14, margin = margin(t = 12, b = 12)),
axis.text = element_text(size = 12, margin = margin(t = 6, b = 6))) +
facet_zoom2(xlim = c(5, 11), ylim = c(0.965, 0.99),
zoom.size = 1, show.area = TRUE, shrink = TRUE, split = FALSE)
# Save figure as PDF
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.pdf"),
plot = fig, width = 10, height = 5)
# Save figure as PNG
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.png"),
plot = fig, width = 10, height = 5)
# Create figure
fig <- ggplot2::ggplot(fig.data,
aes(x = MEAN.DELTA.TIME.S,
xmin = MEAN.DELTA.TIME.S - SE.DELTA.TIME.S,
xmax = MEAN.DELTA.TIME.S + SE.DELTA.TIME.S,
y = MEAN.IMPROV.OBJ,
ymin = MEAN.IMPROV.OBJ - SE.IMPROV.OBJ,
ymax = MEAN.IMPROV.OBJ + SE.IMPROV.OBJ,
color = RULE)) +
ggplot2::geom_point(shape = 22, size = 3) +
ggplot2::geom_errorbarh(height = 0, size = 0.75) +
ggplot2::geom_errorbar(width = 0, size = 0.75) +
ggplot2::xlab("Mean runtime per iteration (in seconds)") +
ggplot2::ylab("Mean improv. over the best initial solution (%)") +
ggplot2::scale_color_discrete(name = "Strategy: ") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "bottom",
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title = element_text(size = 14, margin = margin(t = 90, b = 90)),
axis.text = element_text(size = 12, margin = margin(t = 6, b = 6))) +
facet_zoom2(xlim = c(5, 11), ylim = c(0.965, 0.99),
zoom.size = 1, show.area = TRUE, shrink = TRUE, split = FALSE)
# Save figure as PDF
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.pdf"),
plot = fig, width = 10, height = 5)
# Save figure as PNG
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.png"),
plot = fig, width = 10, height = 5)
# Create figure
fig <- ggplot2::ggplot(fig.data,
aes(x = MEAN.DELTA.TIME.S,
xmin = MEAN.DELTA.TIME.S - SE.DELTA.TIME.S,
xmax = MEAN.DELTA.TIME.S + SE.DELTA.TIME.S,
y = MEAN.IMPROV.OBJ,
ymin = MEAN.IMPROV.OBJ - SE.IMPROV.OBJ,
ymax = MEAN.IMPROV.OBJ + SE.IMPROV.OBJ,
color = RULE)) +
ggplot2::geom_point(shape = 22, size = 3) +
ggplot2::geom_errorbarh(height = 0, size = 0.75) +
ggplot2::geom_errorbar(width = 0, size = 0.75) +
ggplot2::xlab("Mean runtime per iteration (in seconds)") +
ggplot2::ylab("Mean improv. over the best initial solution (%)") +
ggplot2::scale_color_discrete(name = "Strategy: ") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "bottom",
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12, margin = margin(l = 6, b = 6))) +
facet_zoom2(xlim = c(5, 11), ylim = c(0.965, 0.99),
zoom.size = 1, show.area = TRUE, shrink = TRUE, split = FALSE)
# Save figure as PDF
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.pdf"),
plot = fig, width = 10, height = 5)
# Save figure as PNG
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.png"),
plot = fig, width = 10, height = 5)
# Create figure
fig <- ggplot2::ggplot(fig.data,
aes(x = MEAN.DELTA.TIME.S,
xmin = MEAN.DELTA.TIME.S - SE.DELTA.TIME.S,
xmax = MEAN.DELTA.TIME.S + SE.DELTA.TIME.S,
y = MEAN.IMPROV.OBJ,
ymin = MEAN.IMPROV.OBJ - SE.IMPROV.OBJ,
ymax = MEAN.IMPROV.OBJ + SE.IMPROV.OBJ,
color = RULE)) +
ggplot2::geom_point(shape = 22, size = 3) +
ggplot2::geom_errorbarh(height = 0, size = 0.75) +
ggplot2::geom_errorbar(width = 0, size = 0.75) +
ggplot2::xlab("Mean runtime per iteration (in seconds)") +
ggplot2::ylab("Mean improv. over the best initial solution (%)") +
ggplot2::scale_color_discrete(name = "Strategy: ") +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "bottom",
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12, margin = margin(t = 6, b = 6))) +
facet_zoom2(xlim = c(5, 11), ylim = c(0.965, 0.99),
zoom.size = 1, show.area = TRUE, shrink = TRUE, split = FALSE)
# Save figure as PDF
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.pdf"),
plot = fig, width = 10, height = 5)
# Save figure as PNG
ggplot2::ggsave(file.path(output.directory, "improvement_vs_runtime-crossbar.png"),
plot = fig, width = 10, height = 5)
setwd("C:/Users/Monica/Desktop/Analise_Paper2/analysis/anlytic functions experiments_newanalysis/analytic functions experiments")
rm(list = ls())
dependencies.list <- c(
"dplyr",
"ggplot2",
"xtable",
"PMCMR"
)
dependencies.missing <- dependencies.list[!(dependencies.list %in% installed.packages()[,"Package"])]
if (length(dependencies.missing) > 0) {
# Notify for missing libraries
print("The following packages are required but are not installed:")
print(dependencies.missing)
dependencies.install <- readline(prompt = "Do you want them to be installed (Y/n)? ")
if (any(tolower(dependencies.install) == c("y", "yes"))) {
install.packages(dependencies.missing)
}
}
suppressMessages(library(dplyr))
suppressMessages(library(ggplot2))
suppressMessages(library(xtable))
suppressMessages(library(PMCMR))
# Read data file
data.results <- read.csv("./data/metamodels.csv", header = TRUE)
# Factors rule
rule.factors <- list(S1 = "kmeans",
S2 = "lowest",
S3 = "nearest",
S4 = "k_nearest",
S5 = "newest")
levels(data.results$RULE) <- rule.factors
# Compute objective function improvement
data.results <- data.results %>%
dplyr::filter(!(PROB %in% c('perm0db'))) %>%
dplyr::group_by(PROB, NVAR, METAMODEL, RULE, REP) %>%
dplyr::mutate(IMPROV.OBJ = 100 * ((max(BEST.OBJ) - BEST.OBJ) / max(BEST.OBJ))) %>%
dplyr::ungroup()
data.results$PROB <- factor(data.results$PROB, unique(data.results$PROB))
# Pre-process data
aggdata <- data.results %>%
dplyr::group_by(PROB, NVAR, METAMODEL, REP) %>%
dplyr::filter(ITER == max(ITER)) %>%
dplyr::group_by(PROB, NVAR, METAMODEL) %>%
dplyr::summarise(MEAN.BEST.OBJ = mean(BEST.OBJ),
STD.BEST.OBJ = sd(BEST.OBJ)) %>%
dplyr::arrange(PROB, NVAR, METAMODEL)
table.results <- with(aggdata,
cbind(PROB     = aggdata$PROB[aggdata$METAMODEL == "S1"],
NVAR     = aggdata$NVAR[aggdata$METAMODEL == "S1"],
S1.MEAN  = aggdata$MEAN.BEST.OBJ[aggdata$METAMODEL == "S1"],
S1.STD   = aggdata$STD.BEST.OBJ[aggdata$METAMODEL == "S1"],
S2.MEAN = aggdata$MEAN.BEST.OBJ[aggdata$METAMODEL == "S2"],
S2.STD  = aggdata$STD.BEST.OBJ[aggdata$METAMODEL == "S2"],
S3.MEAN = aggdata$MEAN.BEST.OBJ[aggdata$METAMODEL == "S3"],
S3.STD  = aggdata$STD.BEST.OBJ[aggdata$METAMODEL == "S3"],
S4.MEAN  = aggdata$MEAN.BEST.OBJ[aggdata$METAMODEL == "S4"],
S4.STD   = aggdata$STD.BEST.OBJ[aggdata$METAMODEL == "S4"],
S4.MEAN = aggdata$MEAN.BEST.OBJ[aggdata$METAMODEL == "S5"],
S5.STD = aggdata$STD.BEST.OBJ[aggdata$METAMODEL == "S5"]))
xtable(table.results, digits = c(0,0,0,4,4,4,4,4,4,4,4,4,4))
View(aggdata)
View(aggdata)
rm(list = ls())
dependencies.list <- c(
"dplyr",
"ggplot2",
"xtable",
"PMCMR"
)
dependencies.missing <- dependencies.list[!(dependencies.list %in% installed.packages()[,"Package"])]
if (length(dependencies.missing) > 0) {
# Notify for missing libraries
print("The following packages are required but are not installed:")
print(dependencies.missing)
dependencies.install <- readline(prompt = "Do you want them to be installed (Y/n)? ")
if (any(tolower(dependencies.install) == c("y", "yes"))) {
install.packages(dependencies.missing)
}
}
suppressMessages(library(dplyr))
suppressMessages(library(ggplot2))
suppressMessages(library(xtable))
suppressMessages(library(PMCMR))
# Read data file
data.results <- read.csv("./data/metamodels.csv", header = TRUE)
# Factors rule
rule.factors <- list(S1 = "kmeans",
S2 = "lowest",
S3 = "nearest",
S4 = "k_nearest",
S5 = "newest")
levels(data.results$RULE) <- rule.factors
# Compute objective function improvement
data.results <- data.results %>%
dplyr::filter(!(PROB %in% c('perm0db'))) %>%
dplyr::group_by(PROB, NVAR, METAMODEL, RULE, REP) %>%
dplyr::mutate(IMPROV.OBJ = 100 * ((max(BEST.OBJ) - BEST.OBJ) / max(BEST.OBJ))) %>%
dplyr::ungroup()
data.results$PROB <- factor(data.results$PROB, unique(data.results$PROB))
# Pre-process data
aggdata <- data.results %>%
dplyr::group_by(PROB, NVAR, METAMODEL, REP) %>%
dplyr::filter(ITER == max(ITER)) %>%
dplyr::group_by(PROB, NVAR, METAMODEL) %>%
dplyr::summarise(MEAN.BEST.OBJ = mean(BEST.OBJ),
STD.BEST.OBJ = sd(BEST.OBJ)) %>%
dplyr::arrange(PROB, NVAR, METAMODEL)
table.results <- with(aggdata,
cbind(PROB     = aggdata$PROB[aggdata$METAMODEL == "S1"],
NVAR     = aggdata$NVAR[aggdata$METAMODEL == "S1"],
S1.MEAN  = aggdata$MEAN.BEST.OBJ[aggdata$METAMODEL == "S1"],
S1.STD   = aggdata$STD.BEST.OBJ[aggdata$METAMODEL == "S1"],
S2.MEAN = aggdata$MEAN.BEST.OBJ[aggdata$METAMODEL == "S2"],
S2.STD  = aggdata$STD.BEST.OBJ[aggdata$METAMODEL == "S2"],
S3.MEAN = aggdata$MEAN.BEST.OBJ[aggdata$METAMODEL == "S3"],
S3.STD  = aggdata$STD.BEST.OBJ[aggdata$METAMODEL == "S3"],
S4.MEAN  = aggdata$MEAN.BEST.OBJ[aggdata$METAMODEL == "S4"],
S4.STD   = aggdata$STD.BEST.OBJ[aggdata$METAMODEL == "S4"],
S5.MEAN = aggdata$MEAN.BEST.OBJ[aggdata$METAMODEL == "S5"],
S5.STD = aggdata$STD.BEST.OBJ[aggdata$METAMODEL == "S5"]))
xtable(table.results, digits = c(0,0,0,4,4,4,4,4,4,4,4,4,4))
View(aggdata)
View(aggdata)
table.results
S1.MEAN
View(aggdata)
View(aggdata)
View(aggdata)
View(aggdata)
View(data.results)
View(data.results)
rm(list = ls())
dependencies.list <- c(
"dplyr",
"ggplot2",
"xtable",
"PMCMR"
)
dependencies.missing <- dependencies.list[!(dependencies.list %in% installed.packages()[,"Package"])]
if (length(dependencies.missing) > 0) {
# Notify for missing libraries
print("The following packages are required but are not installed:")
print(dependencies.missing)
dependencies.install <- readline(prompt = "Do you want them to be installed (Y/n)? ")
if (any(tolower(dependencies.install) == c("y", "yes"))) {
install.packages(dependencies.missing)
}
}
suppressMessages(library(dplyr))
suppressMessages(library(ggplot2))
suppressMessages(library(xtable))
suppressMessages(library(PMCMR))
# Read data file
data.results <- read.csv("./data/metamodels.csv", header = TRUE)
# Factors rule
rule.factors <- list(S1 = "kmeans",
S2 = "lowest",
S3 = "nearest",
S4 = "k_nearest",
S5 = "newest")
levels(data.results$RULE) <- rule.factors
# Compute objective function improvement
data.results <- data.results %>%
dplyr::filter(!(PROB %in% c('perm0db'))) %>%
dplyr::group_by(PROB, NVAR, METAMODEL, RULE, REP) %>%
dplyr::mutate(IMPROV.OBJ = 100 * ((max(BEST.OBJ) - BEST.OBJ) / max(BEST.OBJ))) %>%
dplyr::ungroup()
data.results$PROB <- factor(data.results$PROB, unique(data.results$PROB))
# Pre-process data
aggdata <- data.results %>%
dplyr::group_by(PROB, NVAR, METAMODEL, RULE, REP) %>%
dplyr::filter(ITER == max(ITER)) %>%
dplyr::group_by(PROB, NVAR, RULE) %>%
dplyr::summarise(MEAN.BEST.OBJ = mean(BEST.OBJ),
STD.BEST.OBJ = sd(BEST.OBJ)) %>%
dplyr::arrange(PROB, NVAR, RULE)
table.results <- with(aggdata,
cbind(PROB     = aggdata$PROB[aggdata$RULE == "S1"],
NVAR     = aggdata$NVAR[aggdata$RULE == "S1"],
S1.MEAN  = aggdata$MEAN.BEST.OBJ[aggdata$RULE == "S1"],
S1.STD   = aggdata$STD.BEST.OBJ[aggdata$RULE == "S1"],
S2.MEAN = aggdata$MEAN.BEST.OBJ[aggdata$RULE == "S2"],
S2.STD  = aggdata$STD.BEST.OBJ[aggdata$RULE == "S2"],
S3.MEAN = aggdata$MEAN.BEST.OBJ[aggdata$RULE == "S3"],
S3.STD  = aggdata$STD.BEST.OBJ[aggdata$RULE == "S3"],
S4.MEAN  = aggdata$MEAN.BEST.OBJ[aggdata$RULE == "S4"],
S4.STD   = aggdata$STD.BEST.OBJ[aggdata$RULE == "S4"],
S5.MEAN = aggdata$MEAN.BEST.OBJ[aggdata$RULE == "S5"],
S5.STD = aggdata$STD.BEST.OBJ[aggdata$RULE == "S5"]))
xtable(table.results, digits = c(0,0,0,4,4,4,4,4,4,4,4,4,4))
